
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BOOL BOOLEANO CADENA CASE COLLON COMA DECREMENTO DIFERENTEQUE DIVISION ELSE ENTERO FLOAT32 FLOAT64 FLOTANTE FOR FUNC IDENTIFICADOR IF IGUALQUE IMPRIMIR INCREMENTO INGRESO INT LKEY LPAREN MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MODULO MULTIPLICACION RESTA RETURN RKEY RPAREN STRING STRUCT SUMA SWITCH TYPE VARsentencia : bloques \n                | funcion\n                bloques : impresion\n                | ingreso\n                | asignacion\n                | estructura\n                | declaracion\n                estructura : TYPE IDENTIFICADOR STRUCT LKEY sentencia RKEYestructura : TYPE IDENTIFICADOR STRUCT LKEY RKEYfuncion : FUNC IDENTIFICADOR LPAREN parametros RPAREN tdato LKEY sentencia RETURN IDENTIFICADOR RKEYfuncion : FUNC IDENTIFICADOR LPAREN parametros RPAREN LKEY sentencia RKEYfuncion : FUNC IDENTIFICADOR LPAREN RPAREN tdato LKEY sentencia RETURN IDENTIFICADOR RKEYfuncion : FUNC IDENTIFICADOR LPAREN RPAREN LKEY sentencia RKEYdeclaracion : VAR IDENTIFICADOR tdato ASSIGN valordeclaracion : VAR IDENTIFICADOR tdatodeclaracion : IDENTIFICADOR COLLON ASSIGN valor\n                declaracion : IDENTIFICADOR tdatoasignacion : IDENTIFICADOR ASSIGN valoresimpresion : IMPRIMIR LPAREN valores RPARENimpresion : IMPRIMIR LPAREN RPARENingreso : INGRESO LPAREN valores RPARENingreso : INGRESO LPAREN RPARENvalores : valor\n                | valor COMA valores\n                valor : ENTERO\n            | FLOTANTE\n            | CADENA\n            | BOOLEANO\n            | IDENTIFICADOR\n            parametros : parametro\n                  | parametro COMA parametros\n                  parametro : IDENTIFICADOR tdatotdato : INT\n             | STRING\n             | FLOAT32\n             | FLOAT64\n             | BOOL\n             '
    
_lr_action_items = {'FUNC':([0,51,56,63,64,68,],[9,9,9,9,9,9,]),'IMPRIMIR':([0,51,56,63,64,68,],[11,11,11,11,11,11,]),'INGRESO':([0,51,56,63,64,68,],[12,12,12,12,12,12,]),'IDENTIFICADOR':([0,9,13,14,16,24,25,28,36,47,51,52,56,57,63,64,68,74,75,],[10,15,26,27,29,29,29,43,29,29,10,29,10,43,10,10,10,76,77,]),'TYPE':([0,51,56,63,64,68,],[13,13,13,13,13,13,]),'VAR':([0,51,56,63,64,68,],[14,14,14,14,14,14,]),'$end':([1,2,3,4,5,6,7,8,18,19,20,21,22,23,29,30,31,32,33,34,35,38,40,42,48,49,50,58,60,61,67,71,73,78,79,],[0,-1,-2,-3,-4,-5,-6,-7,-17,-33,-34,-35,-36,-37,-29,-18,-23,-25,-26,-27,-28,-20,-22,-15,-16,-19,-21,-24,-9,-14,-8,-13,-11,-12,-10,]),'RKEY':([2,3,4,5,6,7,8,18,19,20,21,22,23,29,30,31,32,33,34,35,38,40,42,48,49,50,51,58,59,60,61,65,67,69,71,73,76,77,78,79,],[-1,-2,-3,-4,-5,-6,-7,-17,-33,-34,-35,-36,-37,-29,-18,-23,-25,-26,-27,-28,-20,-22,-15,-16,-19,-21,60,-24,67,-9,-14,71,-8,73,-13,-11,78,79,-12,-10,]),'RETURN':([2,3,4,5,6,7,8,18,19,20,21,22,23,29,30,31,32,33,34,35,38,40,42,48,49,50,58,60,61,67,70,71,72,73,78,79,],[-1,-2,-3,-4,-5,-6,-7,-17,-33,-34,-35,-36,-37,-29,-18,-23,-25,-26,-27,-28,-20,-22,-15,-16,-19,-21,-24,-9,-14,-8,74,-13,75,-11,-12,-10,]),'ASSIGN':([10,17,19,20,21,22,23,42,],[16,36,-33,-34,-35,-36,-37,52,]),'COLLON':([10,],[17,]),'INT':([10,27,43,45,54,],[19,19,19,19,19,]),'STRING':([10,27,43,45,54,],[20,20,20,20,20,]),'FLOAT32':([10,27,43,45,54,],[21,21,21,21,21,]),'FLOAT64':([10,27,43,45,54,],[22,22,22,22,22,]),'BOOL':([10,27,43,45,54,],[23,23,23,23,23,]),'LPAREN':([11,12,15,],[24,25,28,]),'ENTERO':([16,24,25,36,47,52,],[32,32,32,32,32,32,]),'FLOTANTE':([16,24,25,36,47,52,],[33,33,33,33,33,33,]),'CADENA':([16,24,25,36,47,52,],[34,34,34,34,34,34,]),'BOOLEANO':([16,24,25,36,47,52,],[35,35,35,35,35,35,]),'COMA':([19,20,21,22,23,29,31,32,33,34,35,46,53,],[-33,-34,-35,-36,-37,-29,47,-25,-26,-27,-28,57,-32,]),'RPAREN':([19,20,21,22,23,24,25,28,29,31,32,33,34,35,37,39,44,46,53,58,66,],[-33,-34,-35,-36,-37,38,40,45,-29,-23,-25,-26,-27,-28,49,50,54,-30,-32,-24,-31,]),'LKEY':([19,20,21,22,23,41,45,54,55,62,],[-33,-34,-35,-36,-37,51,56,63,64,68,]),'STRUCT':([26,],[41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencia':([0,51,56,63,64,68,],[1,59,65,69,70,72,]),'bloques':([0,51,56,63,64,68,],[2,2,2,2,2,2,]),'funcion':([0,51,56,63,64,68,],[3,3,3,3,3,3,]),'impresion':([0,51,56,63,64,68,],[4,4,4,4,4,4,]),'ingreso':([0,51,56,63,64,68,],[5,5,5,5,5,5,]),'asignacion':([0,51,56,63,64,68,],[6,6,6,6,6,6,]),'estructura':([0,51,56,63,64,68,],[7,7,7,7,7,7,]),'declaracion':([0,51,56,63,64,68,],[8,8,8,8,8,8,]),'tdato':([10,27,43,45,54,],[18,42,53,55,62,]),'valores':([16,24,25,47,],[30,37,39,58,]),'valor':([16,24,25,36,47,52,],[31,31,31,48,31,61,]),'parametros':([28,57,],[44,66,]),'parametro':([28,57,],[46,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencia","S'",1,None,None,None),
  ('sentencia -> bloques','sentencia',1,'p_sentencia','sintactico.py',7),
  ('sentencia -> funcion','sentencia',1,'p_sentencia','sintactico.py',8),
  ('bloques -> impresion','bloques',1,'p_bloques','sintactico.py',11),
  ('bloques -> ingreso','bloques',1,'p_bloques','sintactico.py',12),
  ('bloques -> asignacion','bloques',1,'p_bloques','sintactico.py',13),
  ('bloques -> estructura','bloques',1,'p_bloques','sintactico.py',14),
  ('bloques -> declaracion','bloques',1,'p_bloques','sintactico.py',15),
  ('estructura -> TYPE IDENTIFICADOR STRUCT LKEY sentencia RKEY','estructura',6,'p_estructura','sintactico.py',19),
  ('estructura -> TYPE IDENTIFICADOR STRUCT LKEY RKEY','estructura',5,'p_estructura_vacia','sintactico.py',22),
  ('funcion -> FUNC IDENTIFICADOR LPAREN parametros RPAREN tdato LKEY sentencia RETURN IDENTIFICADOR RKEY','funcion',11,'p_funcion_con_parametros_con_return','sintactico.py',25),
  ('funcion -> FUNC IDENTIFICADOR LPAREN parametros RPAREN LKEY sentencia RKEY','funcion',8,'p_funcion_con_parametros_sin_return','sintactico.py',28),
  ('funcion -> FUNC IDENTIFICADOR LPAREN RPAREN tdato LKEY sentencia RETURN IDENTIFICADOR RKEY','funcion',10,'p_funcion_sin_parametros_con_return','sintactico.py',31),
  ('funcion -> FUNC IDENTIFICADOR LPAREN RPAREN LKEY sentencia RKEY','funcion',7,'p_funcion_sin_parametros_sin_return','sintactico.py',34),
  ('declaracion -> VAR IDENTIFICADOR tdato ASSIGN valor','declaracion',5,'p_declaracion_variable','sintactico.py',37),
  ('declaracion -> VAR IDENTIFICADOR tdato','declaracion',3,'p_declaracion_variable_vacia','sintactico.py',40),
  ('declaracion -> IDENTIFICADOR COLLON ASSIGN valor','declaracion',4,'p_declaracion_variable_simple','sintactico.py',43),
  ('declaracion -> IDENTIFICADOR tdato','declaracion',2,'p_declaracion_variable_estructura','sintactico.py',47),
  ('asignacion -> IDENTIFICADOR ASSIGN valores','asignacion',3,'p_asignacion','sintactico.py',50),
  ('impresion -> IMPRIMIR LPAREN valores RPAREN','impresion',4,'p_impresion','sintactico.py',53),
  ('impresion -> IMPRIMIR LPAREN RPAREN','impresion',3,'p_impresion_sin_valor','sintactico.py',56),
  ('ingreso -> INGRESO LPAREN valores RPAREN','ingreso',4,'p_ingreso','sintactico.py',59),
  ('ingreso -> INGRESO LPAREN RPAREN','ingreso',3,'p_ingreso_sin_valor','sintactico.py',62),
  ('valores -> valor','valores',1,'p_valores','sintactico.py',65),
  ('valores -> valor COMA valores','valores',3,'p_valores','sintactico.py',66),
  ('valor -> ENTERO','valor',1,'p_valor','sintactico.py',70),
  ('valor -> FLOTANTE','valor',1,'p_valor','sintactico.py',71),
  ('valor -> CADENA','valor',1,'p_valor','sintactico.py',72),
  ('valor -> BOOLEANO','valor',1,'p_valor','sintactico.py',73),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','sintactico.py',74),
  ('parametros -> parametro','parametros',1,'p_parametros','sintactico.py',78),
  ('parametros -> parametro COMA parametros','parametros',3,'p_parametros','sintactico.py',79),
  ('parametro -> IDENTIFICADOR tdato','parametro',2,'p_parametro','sintactico.py',83),
  ('tdato -> INT','tdato',1,'p_tdatos','sintactico.py',86),
  ('tdato -> STRING','tdato',1,'p_tdatos','sintactico.py',87),
  ('tdato -> FLOAT32','tdato',1,'p_tdatos','sintactico.py',88),
  ('tdato -> FLOAT64','tdato',1,'p_tdatos','sintactico.py',89),
  ('tdato -> BOOL','tdato',1,'p_tdatos','sintactico.py',90),
]
